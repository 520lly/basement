buildScript: |
    stddef_arch()
    {
        case "$1" in
            arm*)
                echo "arm"
                ;;
            aarch64-*)
                echo "aarch64"
                ;;
            i[34567]86-*)
                echo "i586"
                ;;
            x86_64-*)
                echo "x86_64"
                ;;
            *)
                echo "Unknown architecture" >&2
                exit 1
                ;;
        esac
    }

    stddef_multiarch()
    {
        case "$1" in
            arm*-linux-gnueabi)
                echo "arm-linux-gnueabi"
                ;;
            arm*-linux-gnueabihf)
                echo "arm-linux-gnueabihf"
                ;;
            aarch64*-linux-gnu)
                echo "aarch64-linux-gnu"
                ;;
            i[34567]86*-linux-gnu)
                echo "i386-linux-gnu"
                ;;
            x86_64*-linux-gnu)
                echo "x86_64-linux-gnu"
                ;;
            *)
                echo "Unknown architecture" >&2
                exit 1
                ;;
        esac
    }

    if [ ${AUTOCONF_BUILD:+true} ] ; then
        STDDEF_BUILD_ARCH="$(stddef_arch "$AUTOCONF_BUILD")"
        STDDEF_BUILD_MULTIARCH="$(stddef_multiarch "$AUTOCONF_BUILD")"
        STDDEF_BUILD_TRIPLE="$AUTOCONF_BUILD"
    else
        if [ "$(uname -o)" != "GNU/Linux" ] ; then
            echo "FIXME" >&2
            exit 1
        fi
        case "$(uname -m)" in
            x86_64)
                STDDEF_BUILD_ARCH=x86_64
                STDDEF_BUILD_MULTIARCH=x86_64-linux-gnu
                STDDEF_BUILD_TRIPLE=x86_64-unknown-linux-gnu
                ;;
            i[34567]86)
                STDDEF_BUILD_ARCH=i586
                STDDEF_BUILD_MULTIARCH=i386-linux-gnu
                STDDEF_BUILD_TRIPLE=i586-pc-linux-gnu
                ;;
            *)
                echo "FIXME" >&2
                exit 1
                ;;
        esac
    fi

    if [ ${AUTOCONF_HOST:+true} ] ; then
        STDDEF_HOST_ARCH="$(stddef_arch "$AUTOCONF_HOST")"
        STDDEF_HOST_MULTIARCH="$(stddef_multiarch "$AUTOCONF_HOST")"
        STDDEF_HOST_TRIPLE="$AUTOCONF_HOST"
    else
        STDDEF_HOST_ARCH="$STDDEF_BUILD_ARCH"
        STDDEF_HOST_MULTIARCH="$STDDEF_BUILD_MULTIARCH"
        STDDEF_HOST_TRIPLE="$STDDEF_BUILD_TRIPLE"
    fi

    if [ ${AUTOCONF_TARGET:+true} ] ; then
        STDDEF_TARGET_ARCH="$(stddef_arch "$AUTOCONF_TARGET")"
        STDDEF_TARGET_MULTIARCH="$(stddef_multiarch "$AUTOCONF_TARGET")"
        STDDEF_TARGET_TRIPLE="$AUTOCONF_TARGET"
    else
        STDDEF_TARGET_ARCH="$STDDEF_HOST_ARCH"
        STDDEF_TARGET_MULTIARCH="$STDDEF_HOST_MULTIARCH"
        STDDEF_TARGET_TRIPLE="$STDDEF_HOST_TRIPLE"
    fi

packageScript: |
    stddefCleanup()
    {
        # remove documentation
        rm -rf usr/info usr/share/info
        rm -rf usr/man usr/share/man
        rm -rf usr/share/doc

        # Get rid of libtool files. They cause more harm than good.
        find -name '*.la' -delete
    }

    stddefCleanupDev()
    {
        stddefCleanup

        # fixup pkg-configure files by removing absolute lib dirs
        find -name '*.pc' -exec sed -i -e '/^Libs/s/-L\/[^ ]* //g' {} \;

    }

    stddefCleanupTgt()
    {
        stddefCleanup

        # remove development files
        rm -rf usr/include
        rm -rf usr/lib/*/pkgconfig
        find -name '*.a' -delete
        find -name '*.o' -delete
    }
